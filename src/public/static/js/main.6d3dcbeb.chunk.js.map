{"version":3,"sources":["api/axios.js","actions/account.js","api/account.js","components/Home.js","reducers/acount.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","timeout","interceptors","request","use","config","error","Promise","reject","SET_LIST_ACCOUNT","data","type","payload","SET_ITEM_DATA","dispatch","web","key","username","password","post","getDetialAccount","then","response","status","GET_DETIAL_ITEM_SUCCESS","GET_DETIAL_ITEM_ERROR","Option","Select","Home","list","useSelector","state","account","useDispatch","inputRef","useRef","getData","a","current","value","toast","url","console","log","className","size","placeholder","ref","defaultValue","shape","icon","DownloadOutlined","onClick","showSearch","style","width","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","onChange","getState","length","slice","listPromise","map","item","all","success","CheckOutlined","SnippetsOutlined","FilterOutlined","dataSource","columns","title","dataIndex","sorter","b","goldbalance","coinbalance","initialState","action","rootReducer","combineReducers","configure","store","createStore","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6d3dcbeb.chunk.js","sourcesContent":["import axios from 'axios';\r\n//const BASE_URL =\"http://localhost:4000\"\r\nconst instance  = axios.create({\r\n    // baseURL:BASE_URL,\r\n    timeout:3000000\r\n})\r\ninstance.interceptors.request.use(function (config) {\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n  });\r\nexport default instance ;","import {getDetialAccount} from './../api/account';\r\nimport {  toast } from 'react-toastify';\r\nexport const changeWeb = (data)=>{\r\n    return {\r\n        type:\"CHANGE_WEB\",\r\n        payload:data\r\n    }\r\n}\r\nexport const SET_LIST_ACCOUNT= (data)=>{\r\n    return {\r\n        type:\"SET_LIST\",\r\n        payload:data\r\n    }\r\n}\r\nexport const GET_DETIAL_ALL_ACCOUNT= ()=>{\r\n    return async (dispatch,getState)=>{\r\n        let {web,list} = getState().account ;\r\n        // getDetialAccount(\"123123\",\"Phuongne111\",\"tin123\",getState().account.web).then(response=>{\r\n        //     console.log(response);\r\n        // })\r\n        if(list.length===0){\r\n            return  toast.error(\"Chưa Có Thông Tin\");\r\n        }\r\n        let arrayList = list.slice(0,50);\r\n        // console.log(arrayList);\r\n        let listPromise = list.map(item=>SET_ITEM_DATA(dispatch,item,web));\r\n        let data = await Promise.all(listPromise);\r\n        toast.success(\"Lấy Xong Dữ Liệu\")\r\n    }\r\n}\r\nconst SET_ITEM_DATA = (dispatch,data,web)=>{\r\n    getDetialAccount(data.key,data.username,data.password,web).then(response=>{\r\n        // console.log(response);\r\n        if(response.status===200){\r\n            if(response.data.status===\"success\"){\r\n                dispatch(GET_DETIAL_ITEM_SUCCESS(response.data.data))\r\n            }else{\r\n                dispatch(GET_DETIAL_ITEM_ERROR({status:response.data.status,key:data.key}))\r\n            }\r\n        }\r\n        else {\r\n            dispatch(GET_DETIAL_ITEM_ERROR({status:\"Có Lỗi Xảy Ra\",key:data.key}))\r\n        }\r\n    })\r\n}\r\nconst GET_DETIAL_ITEM_SUCCESS = (data)=>{\r\n    return {\r\n        type: \"GET_DETIAL_ITEM_SUCCESS\",\r\n        payload:data\r\n    }\r\n}\r\nconst GET_DETIAL_ITEM_ERROR = (data)=>{\r\n    return {\r\n        type: \"GET_DETIAL_ITEM_ERROR\",\r\n        payload:data\r\n    }\r\n}","import axios from \"./axios\";\r\nexport const getDataURL = (url)=>{\r\n    return axios.post(\"/getdataweb\",{\r\n        url\r\n    });\r\n}\r\nexport const getDetialAccount = (key,username,password,web)=>{\r\n    return axios.post(\"/api\",{\r\n        key,\r\n        username,\r\n        password,\r\n        web\r\n    });\r\n}","import React ,{useRef} from 'react';\r\nimport { Table } from 'antd';\r\nimport \"antd/dist/antd.css\";\r\nimport { DownloadOutlined ,CheckOutlined,SnippetsOutlined,FilterOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport './style.css';\r\nimport { Select } from 'antd';\r\nimport { Checkbox } from 'antd';\r\nimport { useSelector ,useDispatch } from 'react-redux';\r\nimport {changeWeb} from './../actions/account';\r\nimport {  toast } from 'react-toastify';\r\nimport {getDataURL} from './../api/account';\r\nimport {SET_LIST_ACCOUNT,GET_DETIAL_ALL_ACCOUNT} from './../actions/account';\r\nconst { Option } = Select;\r\n\r\nexport default function Home() {\r\n    let {list}= useSelector(state=>state.account);\r\n    let dispatch = useDispatch();\r\n    let inputRef = useRef();\r\n    const columns = [\r\n        {\r\n            title: 'Username',\r\n            dataIndex: 'username',\r\n            key: 'username',\r\n        },\r\n        {\r\n            title: 'Password',\r\n            dataIndex: 'password',\r\n            key: 'password',\r\n        },\r\n        {\r\n            title: 'Status',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n        },\r\n        {\r\n            title: 'Nickname',\r\n            dataIndex: 'nickname',\r\n            key: 'nickname',\r\n        },\r\n        {\r\n            title: 'Vip Point',\r\n            dataIndex: 'vippoint',\r\n            key: 'vippoint',\r\n        },\r\n        {\r\n            title: 'Gold Balance',\r\n            dataIndex: 'goldbalance',\r\n            key: 'goldbalance',\r\n            sorter: (a, b) => (a.goldbalance - b.goldbalance) \r\n        },\r\n        {\r\n            title: 'Coin Balance',\r\n            dataIndex: 'coinbalance',\r\n            key: 'coinbalance',\r\n            sorter: (a, b) => (a.coinbalance - b.coinbalance) \r\n        },\r\n        {\r\n            title: 'Stock Balance',\r\n            dataIndex: 'stockbalance',\r\n            key: 'stockbalance',\r\n        },\r\n        {\r\n            title: 'Mobile',\r\n            dataIndex: 'mobile',\r\n            key: 'mobile',\r\n        },\r\n        {\r\n            title: 'Telesafe',\r\n            dataIndex: 'telesafe',\r\n            key: 'telesafe',\r\n        },\r\n    ];\r\n    const getData =async ()=>{\r\n        if(!inputRef.current.value){\r\n            return toast.error(\"Nhập URL\")\r\n        }\r\n        let data = await getDataURL(inputRef.current.value);\r\n        console.log(data);\r\n        if(data.data.status===\"success\"){\r\n            dispatch(SET_LIST_ACCOUNT(data.data.data))\r\n        }\r\n    }\r\n    const onChangeSelectWeb= (value)=>{\r\n        dispatch(changeWeb(value))\r\n    }\r\n    const getAllDetialAccount = ()=>{\r\n        dispatch(GET_DETIAL_ALL_ACCOUNT());\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"nav\">\r\n                <div>\r\n                    <div>\r\n                        <input size={30} className=\"w3-input\" type=\"text\" placeholder=\"Nhập\" ref={inputRef} defaultValue=\"https://notepad.vn/mhieum365g\"/>\r\n                        <Button type=\"primary\" className=\"styleDown\" shape=\"circle\" icon={<DownloadOutlined />} size=\"large\" onClick={getData} />\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"name\">Cổng game</span>\r\n                        <Select\r\n                            showSearch\r\n                            style={{ width: 200 }}\r\n                            placeholder=\"1g88.vin\"\r\n                            optionFilterProp=\"children\"\r\n                            filterOption={(input, option) =>\r\n                                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                            }\r\n                            defaultValue={\"1g88.vin\"}\r\n                            onChange={onChangeSelectWeb}\r\n                        >\r\n                            <Option value=\"0\" >1g88.vin</Option>\r\n                            <Option value=\"1\">1w88.vin</Option>\r\n                            <Option value=\"2\">1r88.vin</Option>\r\n                            <Option value=\"3\">1m88.vin</Option>\r\n                            <Option value=\"4\">m365.vin</Option>\r\n                            <Option value=\"5\">w365.vin</Option>\r\n                        </Select>,\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <Checkbox >Checkbox</Checkbox>\r\n                    </div>\r\n                    <div>\r\n                        <Button type=\"primary\" onClick={getAllDetialAccount} className=\"styleDown\" shape=\"circle\" icon={<CheckOutlined />} size=\"large\" />\r\n                    </div>\r\n                    <div>\r\n                        <Button type=\"primary\" className=\"styleCop\" shape=\"circle\" icon={<SnippetsOutlined />} size=\"large\" />\r\n                    </div>\r\n                    <div>\r\n                        <Button type=\"primary\" className=\"styleFilter\" shape=\"circle\" icon={<FilterOutlined />}  size=\"large\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <Table dataSource={list} columns={columns} />;\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","let initialState = {\r\n    list:[],web:0};\r\nconst account = (state=initialState,action)=>{\r\n    switch (action.type) {\r\n        case \"SET_LIST\":\r\n            return {...state,list:[...action.payload]}\r\n        case \"CHANGE_WEB\" :\r\n            return {...state,web:action.payload}\r\n        case \"GET_DETIAL_ITEM_ERROR\" :\r\n            return  {...state,list:[...state.list.map(item=>{\r\n                if(item.key===action.payload.key){\r\n                    item.status= action.payload.status ;\r\n                }\r\n                return item ;\r\n            })]};\r\n        case \"GET_DETIAL_ITEM_SUCCESS\" :\r\n            return {...state,list:[...state.list.map(item=>{\r\n                if(item.key===action.payload.key){\r\n                    return {...item,...action.payload,status:\"Thành Công\"}\r\n                }\r\n                return item ;\r\n            })]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default account ;","import {combineReducers} from 'redux';\r\nimport account from './acount'\r\nconst rootReducer  = combineReducers({\r\n    account\r\n});\r\nexport default  rootReducer ;","import React from 'react';\r\nimport Home from './components/Home';\r\nimport {Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\nimport { toast ,ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\ntoast.configure()\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n        <Home></Home>\r\n        <ToastContainer/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}